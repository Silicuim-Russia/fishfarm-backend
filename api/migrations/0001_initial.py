# Generated by Django 5.1.6 on 2025-04-25 11:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ControlThingsArduino',
            fields=[
                ('pool_id', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('freezer', models.BooleanField(default=False)),
                ('feeder', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('pool_id', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('pool_name', models.CharField(default='Крутой бассейн', max_length=100)),
                ('pool_desc', models.CharField(default='0 ряд, 0 секция', max_length=255)),
                ('rtsp_url', models.URLField(null=True)),
                ('hls_url', models.URLField(null=True)),
                ('temperature_sensor_id', models.IntegerField(null=True)),
                ('oxygen_saturation_sensor_id', models.IntegerField(null=True)),
                ('pH_sensor_id', models.IntegerField(null=True)),
                ('orp_sensor_id', models.IntegerField(null=True)),
                ('salinity_sensor_id', models.IntegerField(null=True)),
                ('water_level_sensor_id', models.IntegerField(null=True)),
                ('turbidity_sensor_id', models.IntegerField(null=True)),
                ('ammonia_content_sensor_id', models.IntegerField(null=True)),
                ('nitrite_content_sensor_id', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PoolStatistic',
            fields=[
                ('pool_id', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('temperature', models.FloatField(null=True)),
                ('oxygen_saturation', models.FloatField(null=True)),
                ('pH', models.FloatField(null=True)),
                ('orp', models.FloatField(null=True)),
                ('salinity', models.FloatField(null=True)),
                ('water_level', models.FloatField(null=True)),
                ('turbidity', models.FloatField(null=True)),
                ('ammonia_content', models.FloatField(null=True)),
                ('nitrite_content', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatisticArduino',
            fields=[
                ('pool_id', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('temperature', models.FloatField(null=True)),
                ('oxygen_saturation', models.FloatField(null=True)),
                ('pH', models.FloatField(null=True)),
                ('orp', models.FloatField(null=True)),
                ('salinity', models.FloatField(null=True)),
                ('water_level', models.FloatField(null=True)),
                ('turbidity', models.FloatField(null=True)),
                ('ammonia_content', models.FloatField(null=True)),
                ('nitrite_content', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PoolOptimalValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.CharField(max_length=20, null=True)),
                ('min', models.FloatField(null=True)),
                ('max', models.FloatField(null=True)),
                ('pool_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.pool')),
            ],
        ),
    ]
